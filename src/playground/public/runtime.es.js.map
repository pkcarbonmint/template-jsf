{"version":3,"file":"runtime.es.js","sources":["../node_modules/.pnpm/mitt@3.0.1/node_modules/mitt/dist/mitt.mjs","../src/runtime/array-handler.ts","../src/runtime/index.ts"],"sourcesContent":["export default function(n){return{all:n=n||new Map,on:function(t,e){var i=n.get(t);i?i.push(e):n.set(t,[e])},off:function(t,e){var i=n.get(t);i&&(e?i.splice(i.indexOf(e)>>>0,1):n.set(t,[]))},emit:function(t,e){var i=n.get(t);i&&i.slice().map(function(n){n(e)}),(i=n.get(\"*\"))&&i.slice().map(function(n){n(t,e)})}}}\n//# sourceMappingURL=mitt.mjs.map\n","import $ from 'jquery';\nimport { pipe } from 'fp-ts/function';\nimport * as O from 'fp-ts/Option';\nimport * as A from 'fp-ts/Array';\n\n/**\n * Setup array handlers for all array containers in the form\n */\nexport function setupArrayHandlers(formElement: HTMLElement): void {\n  // Find all array containers\n  const arrayContainers = formElement.querySelectorAll('.array-container');\n  \n  arrayContainers.forEach(container => {\n    setupArrayContainer(container as HTMLElement);\n  });\n}\n\n/**\n * Setup a single array container with add/remove item functionality\n */\nfunction setupArrayContainer(container: HTMLElement): void {\n  const containerId = container.id;\n  if (!containerId) return;\n  \n  const itemsContainer = container.querySelector('.array-items');\n  const itemTemplate = container.querySelector('.array-item-template');\n  const addButton = container.querySelector('.add-item');\n  \n  if (!itemsContainer || !itemTemplate || !addButton) {\n    console.warn('Array container is missing required elements', container);\n    return;\n  }\n  \n  // Setup add item button\n  addButton.addEventListener('click', () => {\n    addArrayItem(container);\n  });\n  \n  // Add initial item if array is empty\n  if (itemsContainer.children.length <= 1) { // Only template exists\n    addArrayItem(container);\n  }\n  \n  // Setup event delegation for remove buttons\n  itemsContainer.addEventListener('click', (event) => {\n    const target = event.target as HTMLElement;\n    const removeButton = target.closest('.remove-item');\n    \n    if (removeButton) {\n      const arrayItem = removeButton.closest('.array-item');\n      if (arrayItem) {\n        removeArrayItem(container, arrayItem as HTMLElement);\n      }\n    }\n  });\n}\n\n/**\n * Add a new array item to the container\n */\nfunction addArrayItem(container: HTMLElement): HTMLElement {\n  const itemsContainer = container.querySelector('.array-items');\n  const itemTemplate = container.querySelector('.array-item-template');\n  \n  if (!itemsContainer || !itemTemplate) {\n    console.warn('Cannot add array item, missing container or template');\n    throw new Error('Cannot add array item, missing container or template');\n  }\n  \n  // Clone the template\n  const newItem = itemTemplate.cloneNode(true) as HTMLElement;\n  \n  // Remove template class\n  newItem.classList.remove('array-item-template');\n  newItem.classList.remove('hidden');\n  \n  // Find the actual array item within the template\n  const arrayItemElement = newItem.querySelector('.array-item');\n  \n  if (!arrayItemElement) {\n    console.warn('Invalid array item template structure');\n    throw new Error('Invalid array item template structure');\n  }\n  \n  // Generate unique IDs for all fields in the new item\n  const timestamp = Date.now();\n  const random = Math.floor(Math.random() * 10000);\n  const uniqueId = `${timestamp}-${random}`;\n  \n  // Update all input IDs and names to be unique\n  updateFieldIdentifiers(arrayItemElement as HTMLElement, uniqueId);\n  \n  // Append the new item to the container\n  itemsContainer.appendChild(newItem);\n  \n  // Initialize any nested arrays\n  const nestedArrays = newItem.querySelectorAll('.array-container');\n  nestedArrays.forEach(nestedArray => {\n    setupArrayContainer(nestedArray as HTMLElement);\n  });\n  \n  // Trigger any necessary events\n  triggerArrayChangeEvent(container);\n  \n  return newItem;\n}\n\n/**\n * Remove an array item from the container\n */\nfunction removeArrayItem(container: HTMLElement, item: HTMLElement): void {\n  const itemsContainer = container.querySelector('.array-items');\n  \n  if (!itemsContainer) {\n    console.warn('Cannot remove array item, missing container');\n    return;\n  }\n  \n  // Get all visible items (not including the template)\n  const visibleItems = Array.from(itemsContainer.children).filter(child => \n    !child.classList.contains('array-item-template') && \n    !child.classList.contains('hidden')\n  );\n  \n  // Only remove if there's more than one item \n  // (we always keep at least one item in the array)\n  if (visibleItems.length > 1) {\n    item.remove();\n    triggerArrayChangeEvent(container);\n  } else {\n    console.info('Cannot remove the last array item');\n    \n    // Optionally, reset the form fields in the last item instead\n    const inputs = item.querySelectorAll('input, select, textarea');\n    inputs.forEach(input => {\n      if (input instanceof HTMLInputElement) {\n        if (input.type === 'checkbox' || input.type === 'radio') {\n          input.checked = false;\n        } else {\n          input.value = '';\n        }\n      } else {\n        (input as HTMLElement).innerText = '';\n      }\n    });\n  }\n}\n\n/**\n * Update input IDs and names to make them unique\n */\nfunction updateFieldIdentifiers(element: HTMLElement, uniqueId: string): void {\n  // Update input elements\n  const inputs = element.querySelectorAll('input, select, textarea');\n  \n  inputs.forEach(input => {\n    const originalId = input.id;\n    const originalName = input.getAttribute('name');\n    const schemaId = input.getAttribute('data-schema-id');\n    \n    if (originalId) {\n      const newId = `${originalId}_${uniqueId}`;\n      input.id = newId;\n      \n      // Update associated labels\n      const labels = element.querySelectorAll(`label[for=\"${originalId}\"]`);\n      labels.forEach(label => {\n        label.setAttribute('for', newId);\n      });\n    }\n    \n    if (originalName) {\n      input.setAttribute('name', `${originalName}_${uniqueId}`);\n    }\n    \n    if (schemaId) {\n      input.setAttribute('data-schema-id', `${schemaId}_${uniqueId}`);\n    }\n  });\n}\n\n/**\n * Trigger a custom event when array items change\n */\nfunction triggerArrayChangeEvent(container: HTMLElement): void {\n  const event = new CustomEvent('array:change', {\n    bubbles: true,\n    detail: {\n      arrayId: container.id,\n      container: container\n    }\n  });\n  \n  container.dispatchEvent(event);\n}\n\n/**\n * Get array items data from a container\n */\nexport function getArrayItemsData(container: HTMLElement): any[] {\n  const itemsContainer = container.querySelector('.array-items');\n  if (!itemsContainer) return [];\n  \n  // Get all visible items (not including the template)\n  const visibleItems = Array.from(itemsContainer.children).filter(child => \n    !child.classList.contains('array-item-template') && \n    !child.classList.contains('hidden')\n  );\n  \n  return visibleItems.map(item => {\n    const itemData: Record<string, any> = {};\n    const inputs = item.querySelectorAll('input, select, textarea');\n    \n    inputs.forEach(input => {\n      if (input instanceof HTMLInputElement) {\n        const name = input.name;\n        if (!name) return;\n        \n        let value;\n        if (input.type === 'checkbox') {\n          value = input.checked;\n        } else if (input.type === 'number' || input.type === 'range') {\n          value = input.valueAsNumber;\n        } else {\n          value = input.value;\n        }\n        \n        itemData[name] = value;\n      } else {\n        const name = input.getAttribute('name');\n        if (!name) return;\n        \n        itemData[name] = (input as HTMLInputElement).value;\n      }\n    });\n    \n    return itemData;\n  });\n}\n\nexport default {\n  setupArrayHandlers,\n  getArrayItemsData\n}; ","import { pipe } from 'fp-ts/function';\nimport * as O from 'fp-ts/Option';\nimport * as E from 'fp-ts/Either';\nimport * as A from 'fp-ts/Array';\nimport * as R from 'fp-ts/Record';\nimport mitt from 'mitt';\nimport $ from 'jquery';\nimport { setupArrayHandlers, getArrayItemsData } from './array-handler';\n\n// Types\nexport type JSONSchema = {\n  $schema?: string;\n  $id?: string;\n  title?: string;\n  description?: string;\n  type: string;\n  properties?: Record<string, JSONSchema>;\n  required?: string[];\n  items?: JSONSchema;\n  enum?: any[];\n  minimum?: number;\n  maximum?: number;\n  minLength?: number;\n  maxLength?: number;\n  pattern?: string;\n  format?: string;\n  default?: any;\n  if?: JSONSchema;\n  then?: JSONSchema;\n  else?: JSONSchema;\n  allOf?: JSONSchema[];\n  anyOf?: JSONSchema[];\n  oneOf?: JSONSchema[];\n  not?: JSONSchema;\n  const?: any;\n  conditionals?: any[];\n  dependencies?: Record<string, any>;\n};\n\nexport type FormOptions = {\n  submitUrl?: string;\n  schemaUrl?: string;\n  templateUrl?: string;\n  onChange?: (data: any) => void;\n  onSubmit?: (data: any) => void;\n  onError?: (errors: any[]) => void;\n  defaultData?: Record<string, any>;\n  onReady?: (form: SchemaForm) => void;\n  debug?: boolean;\n};\n\ninterface FormEvents {\n  ready: { schema: JSONSchema };\n  error: { message: string } | { errors: any[] };\n  change: { field: string; value: any; formData: Record<string, any> };\n  submit: { formData: Record<string, any> };\n  fieldShow: { field: string; reason?: string };\n  fieldHide: { field: string; reason?: string };\n  reset: { formData: Record<string, any> };\n  [key: string]: any; // Allow for other events\n  [key: symbol]: any; // Add index signature for symbol\n}\n\nexport type SchemaPaths = Record<string, string>;\n\nexport class SchemaForm {\n  private schema: JSONSchema | null = null;\n  private element: HTMLElement;\n  private formElement: HTMLFormElement | null = null;\n  private emitter = mitt<FormEvents>();\n  private options: FormOptions;\n  private formData: Record<string, any> = {};\n  private schemaPathMap: SchemaPaths = {};\n  private fieldVisibilityHistory: Record<string, {action: string, reason: string, timestamp: number}[]> = {};\n  \n  constructor(element: HTMLElement | string, options: FormOptions = {}) {\n    // Set element - either directly or by selector\n    if (typeof element === 'string') {\n      const el = document.querySelector(element);\n      if (!el) {\n        throw new Error(`Element not found: ${element}`);\n      }\n      this.element = el as HTMLElement;\n    } else {\n      this.element = element;\n    }\n    \n    // Set options\n    this.options = options;\n    \n    // Initialize data structures\n    this.formData = {};\n    this.schemaPathMap = {};\n    this.fieldVisibilityHistory = {};\n    \n    // Create event emitter\n    this.emitter = mitt<FormEvents>();\n    \n    // Add debug log listener for all events if in debug mode\n    if (options.debug) {\n      this.emitter.on('*', (type, event) => {\n        console.log(`[SchemaForm Event] ${type as string}:`, event);\n      });\n    }\n    \n    // Initialize the form\n    this.init().catch(err => {\n      console.error('Failed to initialize form:', err);\n    });\n  }\n  \n  public async init(): Promise<void> {\n    try {\n      // Load schema if URL is provided\n      if (this.options.schemaUrl) {\n        this.schema = await this.loadSchema(this.options.schemaUrl);\n        if (!this.schema) {\n          throw new Error('Failed to load schema');\n        }\n        this.buildSchemaPathMap();\n      }\n      \n      // Load template if URL is provided\n      if (this.options.templateUrl) {\n        await this.loadTemplate(this.options.templateUrl);\n      }\n      \n      // Setup form\n      this.setupForm();\n      \n      // Initialize form data with default values if provided\n      if (this.options.defaultData) {\n        this.formData = { ...this.options.defaultData };\n        this.updateFormFields();\n      } else {\n        // Initialize form data from fields that exist in the form\n        this.initializeFormDataFromFields();\n      }\n      \n      // Call the initial evaluateAllConditions to set up initial visibility\n      this.evaluateAllConditions();\n      \n      // Emit ready event\n      if (this.schema)\n        this.emitter.emit('ready', { schema: this.schema });\n      \n      // Call onReady callback if provided\n      if (this.options.onReady) {\n        this.options.onReady(this);\n      }\n    } catch (error) {\n      console.error('Error initializing form:', error);\n      this.emitter.emit('error', { message: `Initialization error: ${error}` });\n    }\n  }\n  \n  private async loadSchema(schemaUrl: string): Promise<JSONSchema | null> {\n    try {\n      const response = await fetch(schemaUrl);\n      if (!response.ok) {\n        throw new Error(`Failed to load schema: ${response.statusText}`);\n      }\n      \n      const schema = await response.json();\n      \n      // Process the schema to extract conditionals\n      this.processSchemaConditionals(schema);\n      \n      return schema;\n    } catch (error) {\n      console.error(`Error loading schema: ${error}`);\n      this.emitter.emit('error', { message: `Failed to load schema: ${error}` });\n      return null;\n    }\n  }\n  \n  private processSchemaConditionals(schema: JSONSchema): void {\n    schema.conditionals = schema.conditionals || [];\n    const conditionals = schema.conditionals;\n    // Extract if/then/else at root level\n    if (schema.if && (schema.then || schema.else)) {\n      schema.conditionals.push({\n        if: schema.if,\n        then: schema.then,\n        else: schema.else\n      });\n    }\n    \n    // Look for conditionals in allOf\n    if (schema.allOf) {\n      schema.allOf.forEach(subSchema => {\n        if (subSchema.if && (subSchema.then || subSchema.else)) {\n          conditionals.push({\n            if: subSchema.if,\n            then: subSchema.then,\n            else: subSchema.else\n          });\n        }\n      });\n    }\n    \n    // Process dependencies (another form of conditionals)\n    if (schema.dependencies) {\n      Object.entries(schema.dependencies).forEach(([propName, dependency]) => {\n        if (typeof dependency === 'object' && !Array.isArray(dependency)) {\n          // Schema dependency\n          const conditionalSchema = {\n            if: {\n              properties: {\n                [propName]: { type: 'string' } // Exists and has any value\n              },\n              required: [propName]\n            },\n            then: dependency\n          };\n          \n          conditionals.push(conditionalSchema);\n        }\n      });\n    }\n  }\n  \n  private async loadTemplate(url: string): Promise<void> {\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`Failed to load template from ${url}: ${response.statusText}`);\n      }\n      const html = await response.text();\n      this.element.innerHTML = html;\n    } catch (error) {\n      console.error('Error loading template:', error);\n      throw error;\n    }\n  }\n  \n  private setupForm(): void {\n    // Find form element\n    this.formElement = this.element.querySelector('form');\n    \n    if (!this.formElement) {\n      console.warn('No form element found in container');\n      return;\n    }\n    \n    // Make sure the form has our identifier\n    if (!this.formElement.hasAttribute('data-schema-form')) {\n      this.formElement.setAttribute('data-schema-form', 'true');\n    }\n    \n    // Initialize array handling\n    setupArrayHandlers(this.element);\n    \n    // Setup input events\n    this.setupInputEvents();\n    \n    // Setup form submission\n    this.formElement.addEventListener('submit', (e) => {\n      e.preventDefault();\n      this.submit();\n    });\n    \n    // Initialize conditionals\n    this.evaluateConditions();\n    \n    // Listen for array change events\n    this.element.addEventListener('array:change', this.handleArrayChange.bind(this) as EventListener);\n  }\n  \n  private setupInputEvents(): void {\n    // Find all input elements\n    const inputs = this.element.querySelectorAll(\n      'input, select, textarea'\n    );\n    \n    inputs.forEach(input => {\n      // Try to get field identifier from data-schema-id, data-schema-path, or input name\n      const fieldId = input.getAttribute('data-schema-id') || \n                      input.getAttribute('data-schema-path') || \n                      (input as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement).name;\n      \n      if (!fieldId && (input as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement).name === '') {\n        // Skip elements without any identifier\n        return;\n      }\n      \n      // Remove existing event listeners to prevent duplicates\n      const newInput = input.cloneNode(true);\n      if (input.parentNode) {\n        input.parentNode.replaceChild(newInput, input);\n      }\n      \n      // Handle change events\n      newInput.addEventListener('change', (event) => {\n        this.handleFieldChange(event);\n      });\n      \n      // Handle input events for immediate feedback\n      newInput.addEventListener('input', (event) => {\n        this.handleFieldChange(event);\n      });\n      \n      // Initialize with default values\n      this.updateFormDataFromField(fieldId, newInput as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement);\n    });\n    \n    // Add logging to help debug\n    console.log(`Setup events for ${inputs.length} form fields`);\n  }\n  \n  private handleFieldChange(event: Event): void {\n    const input = event.target as HTMLInputElement;\n    if (!input) return;\n    \n    // Try to get the schema path from data-schema-id, data-schema-path, or name\n    const schemaElement = input.closest('[data-schema-id], [data-schema-path]');\n    const fieldId = schemaElement?.getAttribute('data-schema-id') || \n                    schemaElement?.getAttribute('data-schema-path') || \n                    input.name;\n    \n    if (!fieldId) return;\n    \n    // Update form data\n    this.updateFormDataFromField(fieldId, input);\n    \n    // Evaluate conditional rules\n    this.evaluateAllConditions();\n    \n    // Emit change event\n    this.emitter.emit('change', { field: fieldId, value: input.value, formData: this.getFormData() });\n    \n    // Call onChange callback if provided\n    if (this.options.onChange) {\n      this.options.onChange(this.getFormData());\n    }\n  }\n  \n  private updateFormDataFromField(fieldId: string, input: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement): void {\n    if (!fieldId) return;\n    \n    let value: any;\n    \n    // Handle different input types\n    if (input.type === 'checkbox') {\n      value = (input as HTMLInputElement).checked;\n    } else if (input.type === 'number' || input.type === 'range') {\n      value = parseFloat((input as HTMLInputElement).value);\n      if (isNaN(value)) value = null;\n    } else {\n      value = input.value;\n    }\n\n    // Extract actual field path from the input name or fieldId\n    // Handle inputs with names like \"field-additionalInfo-phone\" which should map to additionalInfo.phone\n    let actualFieldPath = fieldId;\n\n    // Check if it's a field with prefixed name (field-xxx-yyy)\n    if (fieldId.startsWith('field-')) {\n      const parts = fieldId.split('-');\n      if (parts.length > 1) {\n        // Skip the 'field' prefix and join the rest with dots\n        actualFieldPath = parts.slice(1).join('.');\n      }\n    }\n    \n    // Update nested path in form data\n    if (actualFieldPath.includes('.')) {\n      const parts = actualFieldPath.split('.');\n      let current = this.formData;\n      \n      // Create nested objects for each part of the path except the last\n      for (let i = 0; i < parts.length - 1; i++) {\n        const part = parts[i];\n        if (!current[part] || typeof current[part] !== 'object') {\n          current[part] = {};\n        }\n        current = current[part];\n      }\n      \n      // Set the value at the final path\n      current[parts[parts.length - 1]] = value;\n    } else {\n      // Simple top-level property\n      this.formData[actualFieldPath] = value;\n    }\n    \n    console.log('Updated form data:', this.formData);\n  }\n  \n  private handleSubmit(event: Event): void {\n    event.preventDefault();\n    \n    // Validate form data against schema\n    // (Implementation would depend on validation library)\n    \n    // Emit submit event\n    this.emitter.emit('submit', { formData: { ...this.formData } });\n    \n    // Call onSubmit callback if provided\n    if (this.options.onSubmit) {\n      this.options.onSubmit({ ...this.formData });\n    }\n    \n    // Submit form data to server if submitUrl is provided\n    if (this.options.submitUrl) {\n      this.submitToServer();\n    }\n  }\n  \n  private async submitToServer(): Promise<void> {\n    if (!this.options.submitUrl) return;\n    \n    try {\n      const response = await fetch(this.options.submitUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(this.formData)\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Server submission failed: ${response.statusText}`);\n      }\n      \n      const result = await response.json();\n      console.log('Server response:', result);\n    } catch (error) {\n      console.error('Error submitting form to server:', error);\n      this.emitter.emit('error', { errors: [error] });\n    }\n  }\n  \n  private buildSchemaPathMap(): void {\n    if (!this.schema) return;\n    \n    // Reset path map\n    this.schemaPathMap = {};\n    \n    // Build path map recursively\n    this.mapSchemaPaths(this.schema, '');\n  }\n  \n  private mapSchemaPaths(schema: JSONSchema, path: string): void {\n    // Map the current schema node\n    const id = path || 'root';\n    this.schemaPathMap[id] = path;\n    \n    // Map properties for object types\n    if (schema.type === 'object' && schema.properties) {\n      Object.entries(schema.properties).forEach(([key, propSchema]) => {\n        const propPath = path ? `${path}.${key}` : key;\n        this.mapSchemaPaths(propSchema, propPath);\n      });\n    }\n    \n    // Map items for array types\n    if (schema.type === 'array' && schema.items) {\n      const itemsPath = path ? `${path}.items` : 'items';\n      this.mapSchemaPaths(schema.items, itemsPath);\n    }\n    \n    // Map conditional schemas\n    if (schema.if) {\n      const ifPath = path ? `${path}.if` : 'if';\n      this.mapSchemaPaths(schema.if, ifPath);\n    }\n    \n    if (schema.then) {\n      const thenPath = path ? `${path}.then` : 'then';\n      this.mapSchemaPaths(schema.then, thenPath);\n    }\n    \n    if (schema.else) {\n      const elsePath = path ? `${path}.else` : 'else';\n      this.mapSchemaPaths(schema.else, elsePath);\n    }\n    \n    // Map allOf schemas\n    if (schema.allOf) {\n      schema.allOf.forEach((subSchema, index) => {\n        const subPath = path ? `${path}.allOf[${index}]` : `allOf[${index}]`;\n        this.mapSchemaPaths(subSchema, subPath);\n      });\n    }\n    \n    // Map anyOf schemas\n    if (schema.anyOf) {\n      schema.anyOf.forEach((subSchema, index) => {\n        const subPath = path ? `${path}.anyOf[${index}]` : `anyOf[${index}]`;\n        this.mapSchemaPaths(subSchema, subPath);\n      });\n    }\n    \n    // Map oneOf schemas\n    if (schema.oneOf) {\n      schema.oneOf.forEach((subSchema, index) => {\n        const subPath = path ? `${path}.oneOf[${index}]` : `oneOf[${index}]`;\n        this.mapSchemaPaths(subSchema, subPath);\n      });\n    }\n  }\n  \n  private evaluateAllConditions(): void {\n    if (!this.schema) return;\n    \n    // First ensure basic fields are visible\n    this.showBasicFields();\n    \n    // Then hide conditional fields that should be hidden by default\n    this.hideConditionalFields();\n    \n    // Check and apply JSON Schema conditionals\n    this.evaluateSchemaConditionals();\n    \n    // Check for application-specific conditionals\n    if (this.schema.conditionals) {\n      this.schema.conditionals.forEach((conditional, index) => {\n        this.evaluateConditional(conditional, index);\n      });\n    }\n  }\n  \n  private showBasicFields(): void {\n    // Make sure all basic fields in the schema properties are visible by default\n    if (!this.schema || !this.schema.properties) return;\n    \n    console.log('Ensuring basic schema properties are visible');\n    \n    // Get all top-level property names from the schema\n    const topLevelProperties = Object.keys(this.schema.properties);\n    \n    // Show each property field by default\n    topLevelProperties.forEach(propName => {\n      // Skip special fields and known conditional sections\n      if (propName.startsWith('_') || \n          propName === 'additionalInfo' || \n          propName === 'personalSection' || \n          propName === 'businessSection' || \n          propName === 'nonprofitSection') {\n        return;\n      }\n      \n      const field = this.element.querySelector(`[data-schema-path=\"${propName}\"]`);\n      if (field) {\n        console.log(`Ensuring field is visible: ${propName}`);\n        this.showFieldElement(field as HTMLElement, \"Basic schema property\");\n      }\n    });\n  }\n  \n  private hideConditionalFields(): void {\n    // Hide the additionalInfo section by default (specifically for simple schema)\n    const additionalInfoField = this.element.querySelector('[data-schema-path=\"additionalInfo\"]');\n    if (additionalInfoField) {\n      this.hideFieldElement(additionalInfoField as HTMLElement, \"Hidden by default (additionalInfo)\");\n      console.log('Hiding additionalInfo field by default');\n    }\n    \n    // Find all fields that are explicitly marked as conditional\n    const conditionalFields = this.element.querySelectorAll('[data-conditional=\"true\"]');\n    conditionalFields.forEach((field) => {\n      this.hideFieldElement(field as HTMLElement, \"Marked as conditional\");\n    });\n  }\n  \n  private evaluateSchemaConditionals(): void {\n    if (!this.schema) return;\n    \n    // Process if/then/else conditional\n    if (this.schema.if && (this.schema.then || this.schema.else)) {\n      const ifConditionMet = this.evaluateSchemaCondition(this.schema.if);\n      console.log(`If condition evaluated: ${ifConditionMet ? 'TRUE' : 'FALSE'}`);\n      \n      if (ifConditionMet && this.schema.then) {\n        this.applySchemaConditional(this.schema.then);\n      } else if (!ifConditionMet && this.schema.else) {\n        this.applySchemaConditional(this.schema.else);\n      }\n    }\n    \n    // Process allOf conditionals\n    if (this.schema.allOf && Array.isArray(this.schema.allOf)) {\n      this.schema.allOf.forEach((condition, index) => {\n        if (condition.if) {\n          const ifConditionMet = this.evaluateSchemaCondition(condition.if);\n          console.log(`AllOf[${index}] if condition evaluated: ${ifConditionMet ? 'TRUE' : 'FALSE'}`);\n          \n          if (ifConditionMet && condition.then) {\n            this.applySchemaConditional(condition.then);\n          } else if (!ifConditionMet && condition.else) {\n            this.applySchemaConditional(condition.else);\n          }\n        }\n      });\n    }\n    \n    // Process anyOf conditionals\n    if (this.schema.anyOf && Array.isArray(this.schema.anyOf)) {\n      const accountType = this.getNestedValue(this.formData, 'accountType');\n      console.log(`Processing anyOf with accountType: ${accountType}`);\n      \n      // First handle the business account case\n      if (accountType === 'business') {\n        const businessCondition = this.schema.anyOf.find(condition => \n          condition.properties && \n          condition.properties.accountType && \n          condition.properties.accountType.const === 'business'\n        );\n        \n        if (businessCondition) {\n          console.log('Applying business account anyOf condition');\n          this.applySchemaConditional(businessCondition);\n          \n          // Specifically handle the businessSection and its required fields\n          if (businessCondition.properties && businessCondition.properties.businessSection) {\n            const businessSectionSchema = businessCondition.properties.businessSection;\n            \n            // Show the business section\n            const businessSection = this.element.querySelector('[data-schema-path=\"businessSection\"]');\n            if (businessSection) {\n              this.showFieldElement(businessSection as HTMLElement);\n              \n              // If there are required fields defined, make them required\n              if (businessSectionSchema.required && Array.isArray(businessSectionSchema.required)) {\n                businessSectionSchema.required.forEach((fieldName: string) => {\n                  const fieldInput = this.element.querySelector(`[name=\"field-businessSection-${fieldName}\"]`);\n                  if (fieldInput) {\n                    console.log(`Making business field ${fieldName} required from anyOf`);\n                    (fieldInput as HTMLElement).setAttribute('required', 'required');\n                  }\n                });\n              }\n            }\n            \n            // Hide the personal and nonprofit sections\n            const personalSection = this.element.querySelector('[data-schema-path=\"personalSection\"]');\n            const nonprofitSection = this.element.querySelector('[data-schema-path=\"nonprofitSection\"]');\n            \n            if (personalSection) {\n              this.hideFieldElement(personalSection as HTMLElement);\n            }\n            \n            if (nonprofitSection) {\n              this.hideFieldElement(nonprofitSection as HTMLElement);\n            }\n          }\n        }\n      } \n      // Handle personal account case\n      else if (accountType === 'personal') {\n        const personalCondition = this.schema.anyOf.find(condition => \n          condition.properties && \n          condition.properties.accountType && \n          condition.properties.accountType.const === 'personal'\n        );\n        \n        if (personalCondition) {\n          console.log('Applying personal account anyOf condition');\n          this.applySchemaConditional(personalCondition);\n          \n          // Specifically show the personal section\n          const personalSection = this.element.querySelector('[data-schema-path=\"personalSection\"]');\n          if (personalSection) {\n            this.showFieldElement(personalSection as HTMLElement);\n          }\n          \n          // Hide the business and nonprofit sections\n          const businessSection = this.element.querySelector('[data-schema-path=\"businessSection\"]');\n          const nonprofitSection = this.element.querySelector('[data-schema-path=\"nonprofitSection\"]');\n          \n          if (businessSection) {\n            this.hideFieldElement(businessSection as HTMLElement);\n            \n            // Remove required attribute from business fields\n            const companyNameInput = this.element.querySelector('[name=\"field-businessSection-companyName\"]');\n            const taxIdInput = this.element.querySelector('[name=\"field-businessSection-taxId\"]');\n            \n            if (companyNameInput) {\n              (companyNameInput as HTMLElement).removeAttribute('required');\n            }\n            \n            if (taxIdInput) {\n              (taxIdInput as HTMLElement).removeAttribute('required');\n            }\n          }\n          \n          if (nonprofitSection) {\n            this.hideFieldElement(nonprofitSection as HTMLElement);\n          }\n        }\n      }\n    }\n  }\n  \n  private evaluateSchemaCondition(condition: any): boolean {\n    // For if conditions that check properties\n    if (condition.properties) {\n      return Object.entries(condition.properties).every(([propName, propCondition]) => {\n        const fieldValue = this.getNestedValue(this.formData, propName);\n        console.log(`Evaluating schema condition for ${propName}:`, { fieldValue, condition: propCondition });\n        \n        // Check minimum value\n        if ((propCondition as any).minimum !== undefined) {\n          return fieldValue >= (propCondition as any).minimum;\n        }\n        \n        // Check maximum value\n        if ((propCondition as any).maximum !== undefined) {\n          return fieldValue <= (propCondition as any).maximum;\n        }\n        \n        // Check enum condition\n        if ((propCondition as any).enum) {\n          return (propCondition as any).enum.includes(fieldValue);\n        }\n        \n        // Check const condition\n        if ((propCondition as any).const !== undefined) {\n          return fieldValue === (propCondition as any).const;\n        }\n        \n        return true;\n      });\n    }\n    \n    return false;\n  }\n  \n  private applySchemaConditional(schema: any): void {\n    console.log('Applying schema conditional:', schema);\n    \n    // Handle required fields\n    if (schema.required && Array.isArray(schema.required)) {\n      schema.required.forEach((fieldName: string) => {\n        console.log(`Making field required by schema conditional: ${fieldName}`);\n        const field = this.element.querySelector(`[data-schema-path=\"${fieldName}\"]`);\n        if (field) {\n          // Make field visible\n          this.showFieldElement(field as HTMLElement);\n          \n          // Make inputs required\n          const inputs = field.querySelectorAll('input, select, textarea');\n          inputs.forEach(input => {\n            (input as HTMLElement).setAttribute('required', 'required');\n          });\n          \n          // Show required markers\n          const markers = field.querySelectorAll('.required-marker');\n          markers.forEach(marker => {\n            (marker as HTMLElement).style.display = 'inline';\n          });\n        }\n      });\n      \n      // Hide sections not in required if they're part of a multi-section group\n      if (schema.required.includes('personalSection') ||\n          schema.required.includes('businessSection') ||\n          schema.required.includes('nonprofitSection')) {\n        \n        // Get all section names\n        const allSections = ['personalSection', 'businessSection', 'nonprofitSection'];\n        \n        // Hide sections not in required list\n        allSections.forEach(sectionName => {\n          if (!schema.required.includes(sectionName)) {\n            const section = this.element.querySelector(`[data-schema-path=\"${sectionName}\"]`);\n            if (section) {\n              this.hideFieldElement(section as HTMLElement);\n            }\n          }\n        });\n      }\n    }\n    \n    // Handle specific properties\n    if (schema.properties) {\n      Object.entries(schema.properties).forEach(([propName, propSchema]) => {\n        if (propName.startsWith('_')) {\n          // Handle special properties\n          if (propName === '_submitDisabled' && (propSchema as any).const === true) {\n            const submitBtn = this.element.querySelector('button[type=\"submit\"]');\n            if (submitBtn) {\n              submitBtn.setAttribute('disabled', 'disabled');\n            }\n          }\n        } else if (propName === 'businessSection' || propName === 'personalSection' || propName === 'nonprofitSection') {\n          // Show the section if it's in the properties\n          const section = this.element.querySelector(`[data-schema-path=\"${propName}\"]`);\n          if (section) {\n            this.showFieldElement(section as HTMLElement);\n            \n            // For business section, we need to make the companyName and taxId required\n            if (propName === 'businessSection' && propSchema && (propSchema as any).required) {\n              const requiredFields = (propSchema as any).required;\n              requiredFields.forEach((fieldName: string) => {\n                const fieldId = `${propName}-${fieldName}`;\n                const fieldInput = this.element.querySelector(`[name=\"field-${fieldId}\"]`);\n                if (fieldInput) {\n                  (fieldInput as HTMLElement).setAttribute('required', 'required');\n                  console.log(`Making nested field required: ${fieldId}`);\n                }\n              });\n            }\n            \n            // Hide other sections\n            const otherSections = ['personalSection', 'businessSection', 'nonprofitSection'].filter(s => s !== propName);\n            otherSections.forEach(sectionName => {\n              const otherSection = this.element.querySelector(`[data-schema-path=\"${sectionName}\"]`);\n              if (otherSection) {\n                this.hideFieldElement(otherSection as HTMLElement);\n              }\n            });\n          }\n        } else if (propName === 'accountType' && (propSchema as any).const) {\n          // When accountType is set, handle visibility of sections\n          const accountType = (propSchema as any).const;\n          \n          if (accountType === 'business') {\n            // Show business section and hide others\n            const businessSection = this.element.querySelector('[data-schema-path=\"businessSection\"]');\n            if (businessSection) {\n              this.showFieldElement(businessSection as HTMLElement);\n              \n              // Make companyName and taxId required\n              const companyNameInput = this.element.querySelector('[name=\"field-businessSection-companyName\"]');\n              const taxIdInput = this.element.querySelector('[name=\"field-businessSection-taxId\"]');\n              \n              if (companyNameInput) {\n                (companyNameInput as HTMLElement).setAttribute('required', 'required');\n              }\n              \n              if (taxIdInput) {\n                (taxIdInput as HTMLElement).setAttribute('required', 'required');\n              }\n            }\n            \n            // Hide other sections\n            const personalSection = this.element.querySelector('[data-schema-path=\"personalSection\"]');\n            const nonprofitSection = this.element.querySelector('[data-schema-path=\"nonprofitSection\"]');\n            \n            if (personalSection) {\n              this.hideFieldElement(personalSection as HTMLElement);\n            }\n            \n            if (nonprofitSection) {\n              this.hideFieldElement(nonprofitSection as HTMLElement);\n            }\n          } else if (accountType === 'personal') {\n            // Show personal section and hide others\n            const personalSection = this.element.querySelector('[data-schema-path=\"personalSection\"]');\n            if (personalSection) {\n              this.showFieldElement(personalSection as HTMLElement);\n            }\n            \n            // Hide other sections\n            const businessSection = this.element.querySelector('[data-schema-path=\"businessSection\"]');\n            const nonprofitSection = this.element.querySelector('[data-schema-path=\"nonprofitSection\"]');\n            \n            if (businessSection) {\n              this.hideFieldElement(businessSection as HTMLElement);\n            }\n            \n            if (nonprofitSection) {\n              this.hideFieldElement(nonprofitSection as HTMLElement);\n            }\n          }\n        } else if (propName === 'contactPreference' && (propSchema as any).const) {\n          // When contactPreference is set, handle required fields\n          const contactPref = (propSchema as any).const;\n          \n          if (contactPref === 'email') {\n            // Make email required\n            const emailInput = this.element.querySelector('[name=\"field-email\"]');\n            if (emailInput) {\n              (emailInput as HTMLElement).setAttribute('required', 'required');\n              \n              // Show email field\n              const emailField = this.element.querySelector('[data-schema-path=\"email\"]');\n              if (emailField) {\n                this.showFieldElement(emailField as HTMLElement);\n              }\n            }\n            \n            // Make phone not required\n            const phoneInput = this.element.querySelector('[name=\"field-phone\"]');\n            if (phoneInput) {\n              (phoneInput as HTMLElement).removeAttribute('required');\n            }\n            \n            // Hide mailing address\n            const mailingAddressField = this.element.querySelector('[data-schema-path=\"mailingAddress\"]');\n            if (mailingAddressField) {\n              this.hideFieldElement(mailingAddressField as HTMLElement);\n            }\n          }\n        } else if (propName === 'phone' || propName === 'email' || propName === 'mailingAddress') {\n          // Handle showing fields for specific contact preferences\n          const field = this.element.querySelector(`[data-schema-path=\"${propName}\"]`);\n          if (field) {\n            this.showFieldElement(field as HTMLElement);\n          }\n        } else {\n          // Handle nested required fields for section objects\n          if (propSchema && typeof propSchema === 'object' && (propSchema as any).required) {\n            const requiredFields = (propSchema as any).required;\n            requiredFields.forEach((fieldName: string) => {\n              const fullPath = `${propName}-${fieldName}`;\n              const field = this.element.querySelector(`[name=\"field-${fullPath}\"]`);\n              if (field) {\n                (field as HTMLElement).setAttribute('required', 'required');\n                console.log(`Making nested field required: ${fullPath}`);\n              }\n            });\n          }\n        }\n      });\n    }\n  }\n  \n  private showFieldElement(element: HTMLElement, reason: string = 'Unknown'): void {\n    // Remove hidden class\n    element.classList.remove('hidden');\n    \n    // Find parent containers that might need to be shown\n    const parentContainer = element.closest('[data-schema-path]');\n    if (parentContainer && parentContainer !== element) {\n      this.showFieldElement(parentContainer as HTMLElement, `Parent of ${element.getAttribute('data-schema-path')}`);\n    }\n    \n    // Track visibility history\n    const path = element.getAttribute('data-schema-path');\n    if (path) {\n      if (!this.fieldVisibilityHistory[path]) {\n        this.fieldVisibilityHistory[path] = [];\n      }\n      \n      this.fieldVisibilityHistory[path].push({\n        action: 'show',\n        reason,\n        timestamp: Date.now()\n      });\n      \n      // Emit event with path and reason\n      this.emitter.emit('fieldShow', { field: path, reason });\n    }\n  }\n  \n  private hideFieldElement(element: HTMLElement, reason: string = 'Unknown'): void {\n    // Add hidden class\n    element.classList.add('hidden');\n    \n    // Track visibility history\n    const path = element.getAttribute('data-schema-path');\n    if (path) {\n      if (!this.fieldVisibilityHistory[path]) {\n        this.fieldVisibilityHistory[path] = [];\n      }\n      \n      this.fieldVisibilityHistory[path].push({\n        action: 'hide',\n        reason,\n        timestamp: Date.now()\n      });\n      \n      // Emit event with path and reason\n      this.emitter.emit('fieldHide', { field: path, reason });\n    }\n  }\n  \n  private handleArrayChange(event: CustomEvent): void {\n    const { arrayId, container } = event.detail;\n    if (!arrayId || !container) return;\n    \n    // Get the data from the array items\n    const itemsData = getArrayItemsData(container);\n    \n    // Update the form data\n    this.formData[arrayId] = itemsData;\n    \n    // Evaluate conditions that might depend on this field\n    this.evaluateAllConditions();\n    \n    // Emit change event\n    console.log(`Array change event for ${arrayId}`, itemsData);\n    this.emitter.emit('change', {\n      field: arrayId,\n      value: itemsData,\n      formData: { ...this.formData }\n    });\n    \n    // Call onChange callback if provided\n    if (this.options.onChange) {\n      this.options.onChange({ ...this.formData });\n    }\n  }\n  \n  /**\n   * Public methods\n   */\n  \n  public on<K extends keyof FormEvents>(type: K, handler: (e: FormEvents[K]) => void): void {\n    this.emitter.on(type, handler as any);\n  }\n  \n  public off<K extends keyof FormEvents>(type: K, handler: (e: FormEvents[K]) => void): void {\n    this.emitter.off(type, handler as any);\n  }\n  \n  public getData(): Record<string, any> {\n    return { ...this.formData };\n  }\n  \n  public setData(data: Record<string, any>): void {\n    this.formData = { ...data };\n    this.updateFormFields();\n    this.evaluateAllConditions();\n  }\n  \n  private updateFormFields(): void {\n    if (!this.formElement) return;\n    \n    // Process flat keys\n    this.processFormData(this.formData);\n  }\n  \n  private processFormData(data: Record<string, any>, prefix = ''): void {\n    Object.entries(data).forEach(([key, value]) => {\n      const fieldName = prefix ? `${prefix}.${key}` : key;\n      \n      // If the value is an object (but not array or null), process it recursively\n      if (value && typeof value === 'object' && !Array.isArray(value) && value !== null) {\n        this.processFormData(value, fieldName);\n      } else {\n        // Set value to the form element\n        const input = this.formElement!.querySelector(`[name=\"${fieldName}\"]`) as \n          HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | null;\n        \n        if (!input) return;\n        \n        if (input.type === 'checkbox') {\n          (input as HTMLInputElement).checked = !!value;\n        } else if (input.type === 'radio') {\n          const radio = this.formElement!.querySelector(`[name=\"${fieldName}\"][value=\"${value}\"]`) as HTMLInputElement | null;\n          if (radio) {\n            radio.checked = true;\n          }\n        } else {\n          input.value = value;\n        }\n      }\n    });\n  }\n  \n  public validate(): boolean {\n    // Simplified validation\n    // A real implementation would need a JSON Schema validator\n    if (this.formElement) {\n      return this.formElement.checkValidity();\n    }\n    return true;\n  }\n  \n  /**\n   * Reset the form to its initial state\n   */\n  public reset(): void {\n    // Reset form data\n    this.formData = this.options.defaultData ? { ...this.options.defaultData } : {};\n    \n    // Reset form element if available\n    if (this.formElement) {\n      this.formElement.reset();\n    }\n    \n    // Re-evaluate conditions\n    this.evaluateAllConditions();\n    \n    // Update form fields with the reset data\n    this.updateFormFields();\n    \n    // Emit reset event\n    console.log('Form reset', this.formData);\n    this.emitter.emit('reset', { formData: { ...this.formData } });\n  }\n  \n  public submit(): void {\n    if (this.formElement) {\n      this.formElement.requestSubmit();\n    }\n  }\n  \n  // Add a method to help debugging\n  public debugEmitter(): void {\n    console.log('Event emitter:', this.emitter);\n    const eventTypes = ['ready', 'change', 'submit', 'error', 'fieldShow', 'fieldHide', 'reset'];\n    \n    eventTypes.forEach(type => {\n      const listeners = (this.emitter as any).all.get(type);\n      console.log(`Event type [${type}] has ${listeners ? listeners.length : 0} listeners`);\n    });\n  }\n  \n  // Method to manually trigger an event (useful for debugging)\n  public triggerEvent(type: string, data: any = {}): void {\n    console.log(`Manually triggering event: ${type}`, data);\n    (this.emitter as any).emit(type, data);\n  }\n  \n  /**\n   * Get the current form data\n   */\n  public getFormData(): Record<string, any> {\n    return { ...this.formData };\n  }\n\n  private evaluateConditions(): void {\n    // Check if schema has conditionals\n    if (!this.schema || !this.schema.conditionals || !Array.isArray(this.schema.conditionals)) {\n      return;\n    }\n\n    // Loop through conditionals and evaluate each one\n    for (const condition of this.schema.conditionals) {\n      if (condition.if && condition.then) {\n        const ifCondition = condition.if;\n        const thenAction = condition.then;\n        \n        // Check if the IF condition matches current form data\n        const isConditionMet = this.evaluateIfCondition(ifCondition);\n        \n        // Apply the THEN actions if condition is met\n        if (isConditionMet) {\n          this.applyThenAction(thenAction);\n        } else if (condition.else) {\n          // Apply ELSE actions if condition is not met and there's an else clause\n          this.applyThenAction(condition.else);\n        }\n      }\n    }\n  }\n\n  private evaluateIfCondition(ifCondition: any): boolean {\n    // If the if condition has properties, check each property\n    if (ifCondition.properties) {\n      for (const [propName, _propCondition] of Object.entries(ifCondition.properties)) {\n        const formValue = this.getFormValue(propName);\n        const propCondition = _propCondition as any;\n\n        // Check enum condition\n        if (propCondition.enum && Array.isArray(propCondition.enum)) {\n          if (!propCondition.enum.includes(formValue)) {\n            return false;\n          }\n        }\n        \n        // Check const condition\n        if ('const' in propCondition && formValue !== propCondition.const) {\n          return false;\n        }\n      }\n      \n      // All conditions matched\n      return true;\n    }\n    \n    return false;\n  }\n\n  private getFormValue(path: string): any {\n    const parts = path.split('.');\n    let value = this.formData;\n    \n    for (const part of parts) {\n      if (value === undefined || value === null) {\n        return undefined;\n      }\n      value = value[part];\n    }\n    \n    return value;\n  }\n\n  private applyThenAction(thenAction: any): void {\n    // Handle required fields\n    if (thenAction.required && Array.isArray(thenAction.required)) {\n      thenAction.required.forEach((fieldPath: string) => {\n        const element = this.element.querySelector(`[data-schema-path=\"${fieldPath}\"]`);\n        if (element) {\n          // Show the field\n          element.classList.remove('hidden');\n          // Mark inputs as required\n          const inputs = element.querySelectorAll('input, select, textarea');\n          inputs.forEach((input: Element, index, parent) => {\n            (input as HTMLInputElement).setAttribute('required', 'required');\n          });\n        }\n      });\n    }\n    \n    // Handle hidden fields - implied by not being in the required array\n    if (thenAction.required && Array.isArray(thenAction.required) && this.schema?.properties) {\n      // Hide elements that aren't in the required array\n      for (const propName of Object.keys(this.schema.properties)) {\n        if (!thenAction.required.includes(propName)) {\n          const element = this.element.querySelector(`[data-schema-path=\"${propName}\"]`);\n          if (element) {\n            this.hideField(propName, element);\n          }\n        }\n      }\n    }\n    \n    // Handle specific properties actions (like showing/hiding specific fields)\n    if (thenAction.properties) {\n      for (const [propName, _propAction] of Object.entries(thenAction.properties)) {\n        const propAction = _propAction as any;\n        if (propName.startsWith('_')) {\n          // Handle special properties (like _submitDisabled)\n          this.handleSpecialProperty(propName, propAction);\n        } else {\n          // Handle regular property actions\n          const element = this.element.querySelector(`[data-schema-path=\"${propName}\"]`);\n          if (element) {\n            // If the property has a const:true, show the field\n            if (propAction.const === true) {\n              element.classList.remove('hidden');\n              this.emitter.emit('fieldShow', { field: propName });\n            } \n            // If the property has a const:false, hide the field\n            else if (propAction.const === false) {\n              this.hideField(propName, element);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private hideField(fieldId: string, element: Element, reason: string = 'Unknown'): void {\n    element.classList.add('hidden');\n    \n    // Make inputs not required\n    const inputs = element.querySelectorAll('input, select, textarea');\n    inputs.forEach((input: Element) => {\n      (input as HTMLElement).removeAttribute('required');\n    });\n    \n    // Track in visibility history and emit event\n    if (!this.fieldVisibilityHistory[fieldId]) {\n      this.fieldVisibilityHistory[fieldId] = [];\n    }\n    \n    this.fieldVisibilityHistory[fieldId].push({\n      action: 'hide',\n      reason,\n      timestamp: Date.now()\n    });\n    \n    this.emitter.emit('fieldHide', { field: fieldId, reason });\n  }\n\n  private handleSpecialProperty(propName: string, propAction: any): void {\n    if (propName === '_submitDisabled') {\n      const submitButton = this.formElement?.querySelector('[type=\"submit\"]');\n      if (submitButton && propAction.const === true) {\n        (submitButton as HTMLButtonElement).disabled = true;\n      } else if (submitButton) {\n        (submitButton as HTMLButtonElement).disabled = false;\n      }\n    }\n  }\n\n  private evaluateConditional(conditional: any, index: number): void {\n    if (!conditional.if || !conditional.then) return;\n    \n    const ifConditionMet = this.evaluateCondition(conditional.if);\n    console.log(`Conditional ${index} evaluated: ${ifConditionMet ? 'TRUE' : 'FALSE'}`, conditional);\n    \n    if (ifConditionMet) {\n      this.applyConditional(conditional.then, `Condition ${index} IF matched`);\n    } else if (conditional.else) {\n      this.applyConditional(conditional.else, `Condition ${index} ELSE applied`);\n    }\n  }\n\n  private evaluateCondition(condition: any): boolean {\n    // Check properties conditions\n    if (condition.properties) {\n      return Object.entries(condition.properties).every(([propName, propCondition]) => {\n        // Get the field value, handling nested properties\n        const fieldValue = this.getNestedValue(this.formData, propName);\n        \n        console.log(`Evaluating condition for ${propName}:`, { \n          fieldValue, \n          condition: propCondition,\n          formData: this.formData \n        });\n        \n        // Check enum condition\n        if ((propCondition as any).enum) {\n          const result = (propCondition as any).enum.includes(fieldValue);\n          console.log(`  - Enum check: ${result} (${fieldValue} in [${(propCondition as any).enum}])`);\n          return result;\n        }\n        \n        // Check const condition\n        if ((propCondition as any).const !== undefined) {\n          const result = fieldValue === (propCondition as any).const;\n          console.log(`  - Const check: ${result} (${fieldValue} === ${(propCondition as any).const})`);\n          return result;\n        }\n        \n        return true;\n      });\n    }\n    \n    return true;\n  }\n\n  private applyConditional(schema: any, reason: string = 'Unknown'): void {\n    console.log(`Applying conditional: ${reason}`, schema);\n    \n    // Apply required fields\n    if (schema.required) {\n      schema.required.forEach((fieldName: string) => {\n        console.log(`Making field required: ${fieldName}`);\n        const field = this.element.querySelector(`[data-schema-path=\"${fieldName}\"]`);\n        if (field) {\n          // Make fields required\n          const inputs = field.querySelectorAll('input, select, textarea');\n          inputs.forEach(input => {\n            input.setAttribute('required', 'required');\n          });\n          \n          // Show required marker\n          const markers = field.querySelectorAll('.required-marker');\n          markers.forEach(marker => {\n            (marker as HTMLElement).style.display = 'inline';\n          });\n          \n          // Ensure the field is visible with reason\n          this.showFieldElement(field as HTMLElement, `Required by condition: ${reason}`);\n        } else {\n          console.log(`Required field not found: ${fieldName}`);\n        }\n      });\n    }\n    \n    // Show/hide fields based on property rules\n    if (schema.properties) {\n      Object.entries(schema.properties).forEach(([propName, propSchema]) => {\n        if (propName.startsWith('_')) {\n          // Handle special property for disabling submit button\n          if (propName === '_submitDisabled' && (propSchema as any).const === true) {\n            const submitBtn = this.element.querySelector('button[type=\"submit\"]');\n            if (submitBtn) {\n              submitBtn.setAttribute('disabled', 'disabled');\n            }\n          }\n        } else {\n          const field = this.element.querySelector(`[data-schema-path=\"${propName}\"]`);\n          if (field) {\n            console.log(`Showing field: ${propName}`);\n            this.showFieldElement(field as HTMLElement, `Property in schema condition: ${reason}`);\n          } else {\n            console.log(`Field not found for path: ${propName}`);\n          }\n        }\n      });\n    }\n  }\n\n  private getNestedValue(obj: Record<string, any>, path: string): any {\n    const parts = path.split('.');\n    let current = obj;\n    \n    for (const part of parts) {\n      if (current === undefined || current === null) {\n        return undefined;\n      }\n      current = current[part];\n    }\n    \n    return current;\n  }\n\n  // New method to initialize form data from existing fields\n  private initializeFormDataFromFields(): void {\n    if (!this.formElement) return;\n    \n    console.log('Initializing form data from fields');\n    \n    // Find all input elements in the form\n    const inputs = this.formElement.querySelectorAll('input, select, textarea');\n    inputs.forEach(input => {\n      const element = input as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n      \n      // Get the field ID based on attributes or name\n      const schemaElement = element.closest('[data-schema-id], [data-schema-path]');\n      const fieldId = schemaElement?.getAttribute('data-schema-id') || \n                     schemaElement?.getAttribute('data-schema-path') || \n                     element.name;\n      \n      if (fieldId) {\n        // Initialize form data with empty values\n        this.updateFormDataFromField(fieldId, element);\n      }\n    });\n    \n    console.log('Initial form data:', this.formData);\n    \n    // Make sure we call onChange with the initial data\n    if (this.options.onChange) {\n      this.options.onChange(this.getFormData());\n    }\n  }\n\n  // Public method to get field visibility history\n  public getFieldVisibilityHistory(): Record<string, any> {\n    return { ...this.fieldVisibilityHistory };\n  }\n\n  /**\n   * Returns detailed information about all fields including visibility state\n   */\n  public getFieldVisibilityReport(): Record<string, any> {\n    if (!this.element) return {};\n    \n    const fields = this.element.querySelectorAll('[data-schema-path]');\n    const report: Record<string, any> = {};\n    \n    fields.forEach(field => {\n      const path = field.getAttribute('data-schema-path');\n      if (!path) return;\n      \n      const isVisible = !field.classList.contains('hidden');\n      const inputs = field.querySelectorAll('input, select, textarea');\n      const inputDetails = Array.from(inputs).map(input => ({\n        name: (input as HTMLInputElement).name,\n        type: (input as HTMLInputElement).type,\n        value: (input as HTMLInputElement).value,\n        required: input.hasAttribute('required')\n      }));\n      \n      // Get the most recent history entry for this field\n      const history = this.fieldVisibilityHistory[path] || [];\n      const lastAction = history.length > 0 ? history[history.length - 1] : undefined;\n      \n      report[path] = {\n        visible: isVisible,\n        lastAction,\n        history: history.slice(-5), // Get the 5 most recent actions\n        inputs: inputDetails.length > 0 ? inputDetails : undefined\n      };\n    });\n    \n    return report;\n  }\n}\n\n/**\n * Factory function to create a new SchemaForm instance.\n * @param element The element or selector to attach the form to\n * @param options Form configuration options\n * @returns A new SchemaForm instance\n */\nexport function createSchemaForm(\n  element: HTMLElement | string, \n  options: FormOptions\n): SchemaForm {\n  const form = new SchemaForm(element, options);\n  // Don't call init() again - it's already called in the constructor\n  return form;\n}\n\n// Export the setupArrayHandlers and getArrayItemsData functions from array-handler\nexport { setupArrayHandlers, getArrayItemsData } from './array-handler';"],"names":["n"],"mappings":"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","x_google_ignoreList":[0]}